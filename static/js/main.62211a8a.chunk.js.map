{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searhField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAK,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAC1B,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHVC,EAAW,SAACR,GAAD,OACnB,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCJjBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SAASF,YAAaA,EAAaX,UAAU,SAASc,SAAUF,MCmCjEG,E,kDA/Bb,aAAc,IAAD,8BACX,gBAQFH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAACC,WAAWF,EAAEG,OAAOC,SARnC,EAAKC,MAAQ,CACXb,SAAW,GAEbU,WAAW,IALA,E,qDAYb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBAE1H,WAAS,IAAD,EACyBC,KAAKN,MAA7Bb,EADD,EACCA,SAAUU,EADX,EACWA,WACXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAWY,kBACnD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,iBAAiBC,aAAgBe,KAAKf,eAC/D,cAAC,EAAD,CAAUJ,SAAUoB,EAAkBC,OAAQF,KAAKN,MAAMH,oB,GAxB3Cc,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.62211a8a.chunk.js","sourcesContent":["import react from \"react\";\r\nimport './card.styles.css';\r\nexport const Card = (props)=>(\r\n    <div className=\"card-container\">\r\n        <img alt =\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n     <h2>{props.monster.name}</h2>\r\n     <p>{props.monster.email}</p>\r\n     </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component';\r\nexport const CardList = (props)=>(\r\n     <div className='card-list'>{\r\n       props.monsters.map(monster=>(\r\n           <Card key={monster.id} monster = {monster} />\r\n       ) )\r\n      }</div>\r\n)","import React from \"react\";\r\nimport './search-box.styles.css';\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input type=\"search\" placeholder={placeholder} className=\"search\" onChange={handleChange}/>\r\n)","\nimport { Component } from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters : [\n    ],\n    searhField:\"\"\n    }\n   \n  }\n  handleChange=(e)=>{\n    this.setState({searhField:e.target.value});\n  }\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response=>response.json()).then(users=>this.setState({monsters:users}))\n  }\n  render(){\n    const {monsters, searhField} = this.state;\n    const filteredMonsters = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searhField.toLowerCase()));\n  return (\n    <div className=\"App\">\n      <h1>Monsters Rolodex</h1>\n      <SearchBox placeholder=\"search monster\" handleChange = {this.handleChange} />\n    <CardList monsters={filteredMonsters} filter={this.state.searhField}>\n    \n    </CardList>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}